{"version":3,"sources":["logo.svg","components/Charactertile/index.js","components/Jumbotron/index.js","components/ScoreDisplay/index.js","components/Grid/index.js","components/Navbar/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CharacterTile","props","react_default","a","createElement","className","value","id","onClick","alt","name","src","image","Jumbotron","ScoreDisplay","score","highScore","Container","_ref","fluid","children","concat","Row","_ref2","Navbar","href","winlossmessage","components_ScoreDisplay","currentScore","topScore","Footer","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","state","clicked","indexOf","handleCalculate","setState","handleReset","newScore","handleShuffle","shuffledCharacters","arr","i","length","j","Math","floor","random","shuffleCharacters","characters","_this2","components_Navbar","components_Jumbotron","map","character","Charactertile","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c815fb40.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterTile(props) {\r\n    return (\r\n        <div \r\n            className=\"col-6 col-sm-4 col-md-3 m-auto\"\r\n            value={props.id}\r\n            onClick={() => {props.onClick(props.id)}}>\r\n        <img\r\n            className=\"card\"\r\n            alt={props.name}\r\n            src={props.image}\r\n            id={props.id}\r\n        />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CharacterTile;","import React from \"react\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n      <div className=\"jumbotron jumbotron-fluid text-center mt-5\">\r\n        <h1 className=\"display-4\">Lord of the Clicks</h1>\r\n        <p className=\"lead\">\r\n          Help the Fellowship destroy the Precious! But don't click on the same character twice or...\r\n        </p>\r\n        <p>...Sauron wins.</p>\r\n      </div>\r\n    );\r\n}\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\nfunction ScoreDisplay(props) {\r\n    return (\r\n        <span>Score: {props.score} | Top Score: {props.highScore}</span>\r\n    );\r\n}\r\n\r\nexport default ScoreDisplay;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport ScoreDisplay from \"../ScoreDisplay\";\r\nimport Grid, { Container, Col, Row } from \"../Grid\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n      <header className=\"d-flex\">\r\n        <nav className=\"navbar navbar-expand-md navbar-light fixed-top nav-theme navbar-header row text-center justify-content-around text-white\">\r\n          <div className=\"col-5\">\r\n            <h2 className=\"col\"><a href=\"/\">Lord of the Clicks</a></h2>\r\n          </div>\r\n          <div className=\"col-2\">\r\n            <h2 className=\"col message\">{props.winlossmessage}</h2>\r\n          </div>\r\n          <div className=\"col-5\">\r\n            <h2 className=\"col\"><ScoreDisplay score={props.currentScore} highScore={props.topScore}/></h2>\r\n          </div>\r\n        </nav>\r\n      </header>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n      <footer className=\"footer mt-5 pt-3 pb-1 footer-theme\">\r\n        <p className=\"pl-3\">\r\n          Clicky Game, LOTR Version\r\n            <img alt=\"React logo\" src=\"./favicon.ico\" className=\"footer-img\" />\r\n        </p>\r\n      </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport CharacterTile from \"./components/Charactertile\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Navbar from \"./components/Navbar\";\nimport Grid, { Container, Col, Row } from \"./components/Grid\";\nimport Footer from \"./components/Footer\";\nimport characters from \"./characters.json\";\n\n/*\nSTEPS FOR THE GAME TO FUNCTION:\n\n1. Random presentation of all characters\n2. Each tile can be \"clicked\" as true or false, but each character starts each new round as \"clicked\" === false\n3. Each time a tile is clicked (and goes from false to true), then add to a \"top score\" counter\n4. If a clicked === true tile gets clicked again, then end the game and restart the round\n  a. Compare the latest score to the last score. If the latest score is higher, then store it as the \"Top Score\". If the latest score is lower, then do nothing.\n\n*/\n\nfunction shuffleCharacters (arr) {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};\n\n// establishes beginning state of game\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      characters,\n      currentScore: 0,\n      topScore: 0,\n      winlossmessage: \"\",\n      clicked: []\n    }\n  }\n\n  handleClick = (id) => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleCalculate();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleCalculate = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState ({\n      currentScore: newScore,\n      winlossmessage: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ winlossmessage: \"You win!\"});\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      winlossmessage: \"Try again!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledCharacters = shuffleCharacters(characters);\n    this.setState({ characters: shuffledCharacters });\n  };\n\n\n// shows the elements on the page\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Navbar\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n          winlossmessage={this.state.winlossmessage}\n        />\n        \n        <Jumbotron />\n\n        <Container fluid>\n\n          <Row>\n            {this.state.characters.map(character => (\n              <CharacterTile \n                image={character.image}\n                key={character.id}\n                id={character.id}\n                name={character.name}\n                onClick={this.handleClick}\n              />\n            ))}\n          </Row>\n\n        </Container>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}